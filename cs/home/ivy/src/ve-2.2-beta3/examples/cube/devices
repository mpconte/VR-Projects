# "devices" file for the "cube" example program.  If this file is
# called "devices" and is located in the current directory, it will
# be loaded automatically at run-time.  It can also be overridden or
# loaded explicitly with the "-ve_devices" command-line option.

# This file list devices that are used at run-time.  The specifics
# of the devices (type, how to connect to them, etc.) are located in
# the manifest file.  The model is that there is typically a single
# manifest for an installation and then a devices file for each particular
# program describing what devices to use and how to use them.

# We'll use the "keyboard" device for input.
use keyboard

# We'll use "joystick" as well, but the "joystick" device may or may
# not be defined, or available, so we'll mark it as an optional device.
# If an optional device is not available at run-time, then the program
# will not use, but otherwise continue.  If a device is not marked as
# optional then the program will exit if it cannot find the device.

use joystick joystick {
	optional 1
}

# Events are identified by names which have two parts - a "device"
# and an "element" (an "element" is a part of a device).  For example,
# a joystick may be a device with several buttons, each one an element.
#
# Now our meaningful event names are "axis.x", "axis.y", and "axis.z"
# But this is not the names that "keyboard" will generate.  We use
# filters to modify incoming events.  Filters are put together in chains
# guarded by a specification.  During processing, an incoming event is
# compared to the specification at the beginning of each chain.  If it
# matches, then the event is passed through all the filters in the chain.

# VE 2.2:  Filters are now written in BlueScript.  Each time a filter
# is executed, the variable "e" is set to a reference to the event object
# we are processing.

# Apply a filter to the "x" key so that it toggles the x axis.
filter keyboard.x {
	$e rename axis.x
}

# Similary for y and z
filter keyboard.y {
	$e rename axis.y
}

filter keyboard.z {
	$e rename axis.z
}

# Note that if we wanted to, we could achieve all of the above with
# just:
#
# filter keyboard { $e rename axis }
#   or
# filter keyboard { $e device axis }
#
# which would rename the "device" part of an events.  However,
# this would rename all incoming keyboard events to "axis" events,
# which would make the following filter useless.

# Setup a key to allow us to exit the program.  To do this, use
# the "exit" command.
#
filter keyboard.Escape { exit }

# We can change the processing for the filter by "returning" a specific
# value.  Examples of known values:
#   "discard" - throw away this event (abort all processing)
#   "deliver" - stop processing this event and deliver it to the application
#               (i.e. call the callback if there is one)

# A silly example
# - we can only see this because the event will never be dumped (see below)
filter keyboard.j {
	return discard
}

# We can also generate new events, in this case, using "copy".  "copy"
# is a member function of an event that returns a new event.  Note that
# the new event is not pushed onto the queue until we *explicitly* push it.
# We do this with the "push" command.  This allows you to change the event
# before pushing it.  Pushing an event pushes a *copy* of the event so we
# only need to create one copy to work with locally to generate multiple
# events.
# The original event is not affected by a copy.  A copied event is processed
# as soon as processing for the current event finishes, so it is possible
# to enter into an infinite loop with copies (e.g. copy creates an event
# that, when filtered, also creates an event, etc.).
# In this case, we'll use it for a key 'a' that will toggle all axes at
# once.
filter keyboard.a {
	# create a copy to work with locally
	set e2 [$e copy]
	$e2 rename axis.x
	# push it
	$e2 push
	# once pushed, we can change our event
	# without affecting the one on the queue
	$e2 rename axis.y
	$e2 push
	# Notice that our last step is a rename rather than a copy.
	# If we don't do this then we should discard this event or
	# otherwise be prepared for it to be processed as "keyboard.a"
	$e rename axis.z
}

# Since pushes push copies of events, we do not need to copy
# to do the above.  Let's do it without a copy and bind that
# to button 'b'.
filter keyboard.b {
	$e rename axis.x
	$e push
	$e rename axis.y
	$e push
	$e rename axis.z
	# do not push - let it process normally
}

# Sometimes we want to change the type of an event to match our
# specs.  Changing the "type" field of an event explicitly changes
# it to a new type.  This will perform a "default" conversion which
# may or may not be what we want.  To have more control over conversion
# we can use built-in BlueScript functionality.

# In this case, assuming that the joystick has an "axis0" that runs
# from -1.0 to 1.0, we'll mimic a switch down event when the value is
# greater "0.5".
filter joystick.axis0 {
	if { [$e type] == "valuator" } {
		# change it to a switch
		echo "value is [$e value]"
		if { [$e value] >= 0.5 } {
			set state 1
		} else {
			set state 0
		}
		$e type switch
		$e state $state
		# rename it to something more useful
		$e rename axis.x
	}
}

# An event object also has a member function called "dump" which prints
# it out to the console.  It is handy for determining what events are
# really being delivered to your program.
filter *.* {
	$e dump
}
